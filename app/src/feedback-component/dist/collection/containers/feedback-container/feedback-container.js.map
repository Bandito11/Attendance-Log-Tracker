{"version":3,"file":"feedback-container.js","sourceRoot":"","sources":["../../../../../src/containers/feedback-container/feedback-container.tsx"],"names":[],"mappings":"AAAA,OAAO,EAAE,SAAS,EAAE,IAAI,EAAE,CAAC,EAAE,KAAK,EAAE,MAAM,EAAE,IAAI,EAAE,MAAM,eAAe,CAAC;AAExE,yDAAyD;AAMzD,MAAM,OAAO,iBAAiB;EAU5B,oBAAoB,CAAC,KAA2B;IAC9C,IAAI,CAAC,MAAM,GAAG,KAAK,CAAC,MAAM,CAAC;EAC7B,CAAC;EAGD,sBAAsB,CAAC,KAA2B;IAChD,IAAI,CAAC,eAAe,GAAG,KAAK,CAAC,MAAM,CAAC;EACtC,CAAC;EACD;;;;;IACE,IAAI,CAAC,MAAM,GAAG,IAAI,CAAC;IACnB,IAAI,CAAC,eAAe,GAAG,KAAK,CAAC;IAC7B,IAAI,CAAC,QAAQ,GAAG,EAAE,CAAC;IACnB,IAAI,IAAI,CAAC,MAAM,KAAK,IAAI,EAAE;MACxB,IAAI,CAAC,QAAQ,GAAG,IAAI,CAAC,QAAQ,CAAC,MAAM,CAAC,SAAS,CAAC,CAAC;KACjD;GACF;EAED,kBAAkB;IAChB,IAAI,IAAI,CAAC,eAAe,EAAE;MACxB,OAAO,CACL,WAAK,KAAK,EAAC,aAAa,EAAC,EAAE,EAAC,eAAe;QACzC,SAAG,KAAK,EAAC,yBAAyB;UAChC,YAAM,KAAK,EAAC,YAAY,aAAe;sCACrC,CACA,CACP,CAAC;KACH;SAAM;MACL,OAAO,IAAI,CAAC,oBAAoB,EAAE,CAAC;KACpC;EACH,CAAC;EAED,oBAAoB;IAClB,IAAI,IAAI,CAAC,MAAM,EAAE;MACf,OAAO,CACL,cACE,KAAK,EAAE,IAAI,CAAC,QAAQ,EACpB,OAAO,EAAE,GAAG,EAAE,CAAC,IAAI,CAAC,qBAAqB,EAAE,gBAGpC,CACV,CAAC;KACH;SAAM;MACL,OAAO,CACL,0BACE,YAAY,EAAE,IAAI,CAAC,YAAY,EAC/B,MAAM,EAAE,IAAI,CAAC,MAAM,GACC,CACvB,CAAC;KACH;EACH,CAAC;EAED,MAAM;IACJ,OAAO,EAAC,IAAI,QAAE,IAAI,CAAC,kBAAkB,EAAE,CAAQ,CAAC;EAClD,CAAC;EACD,qBAAqB;IACnB,IAAI,IAAI,CAAC,MAAM,EAAE;MACf,IAAI,CAAC,MAAM,GAAG,KAAK,CAAC;KACrB;SAAM;MACL,IAAI,CAAC,MAAM,GAAG,IAAI,CAAC;KACpB;EACH,CAAC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;CACF","sourcesContent":["import { Component, Host, h, State, Listen, Prop } from '@stencil/core';\n\n//TODO Change tag property to final name of the component\n@Component({\n  tag: 'feedback-container',\n  styleUrl: 'feedback-container.css',\n  shadow: true,\n})\nexport class FeedbackContainer {\n  @Prop() componentKey: string;\n  @Prop() shadow: boolean;\n\n  @State() hidden: boolean;\n  @State() feedbackCreated: boolean;\n\n  cssClass: string;\n\n  @Listen('cancelClicked')\n  cancelClickedHandler(event: CustomEvent<boolean>) {\n    this.hidden = event.detail;\n  }\n\n  @Listen('feedbackCreated')\n  feedbackCreatedHandler(event: CustomEvent<boolean>) {\n    this.feedbackCreated = event.detail;\n  }\n  constructor() {\n    this.hidden = true;\n    this.feedbackCreated = false;\n    this.cssClass = '';\n    if (this.shadow === true) {\n      this.cssClass = this.cssClass.concat('shadow ');\n    }\n  }\n\n  getFeedbackCreated() {\n    if (this.feedbackCreated) {\n      return (\n        <div class='ripple-back' id='ripple-loader'>\n          <p class='thank-you ripple-loader'>\n            <span class='heart-icon'>&#9829;</span> Thanks for the feedback!\n          </p>\n        </div>\n      );\n    } else {\n      return this.getFeedbackComponent();\n    }\n  }\n\n  getFeedbackComponent() {\n    if (this.hidden) {\n      return (\n        <button\n          class={this.cssClass}\n          onClick={() => this.showFeedbackComponent()}\n        >\n          Feedback?\n        </button>\n      );\n    } else {\n      return (\n        <feedback-component\n          componentKey={this.componentKey}\n          shadow={this.shadow}\n        ></feedback-component>\n      );\n    }\n  }\n\n  render() {\n    return <Host>{this.getFeedbackCreated()}</Host>;\n  }\n  showFeedbackComponent(): void {\n    if (this.hidden) {\n      this.hidden = false;\n    } else {\n      this.hidden = true;\n    }\n  }\n}\n"]}